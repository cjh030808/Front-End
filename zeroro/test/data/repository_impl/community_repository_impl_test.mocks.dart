// Mocks generated by Mockito 5.4.6 from annotations
// in zeroro/test/data/repository_impl/community_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:zeroro/data/data_source/community.api.dart' as _i4;
import 'package:zeroro/domain/model/comment/comment.model.dart' as _i3;
import 'package:zeroro/domain/model/post/post.model.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePost_0 extends _i1.SmartFake implements _i2.Post {
  _FakePost_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeComment_1 extends _i1.SmartFake implements _i3.Comment {
  _FakeComment_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CommunityApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommunityApi extends _i1.Mock implements _i4.CommunityApi {
  MockCommunityApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.Post>> getPosts(int? offset) =>
      (super.noSuchMethod(
            Invocation.method(#getPosts, [offset]),
            returnValue: _i5.Future<List<_i2.Post>>.value(<_i2.Post>[]),
          )
          as _i5.Future<List<_i2.Post>>);

  @override
  _i5.Future<_i2.Post> createPost(_i2.Post? post) =>
      (super.noSuchMethod(
            Invocation.method(#createPost, [post]),
            returnValue: _i5.Future<_i2.Post>.value(
              _FakePost_0(this, Invocation.method(#createPost, [post])),
            ),
          )
          as _i5.Future<_i2.Post>);

  @override
  _i5.Future<_i2.Post> updatePost(int? postId, _i2.Post? post) =>
      (super.noSuchMethod(
            Invocation.method(#updatePost, [postId, post]),
            returnValue: _i5.Future<_i2.Post>.value(
              _FakePost_0(this, Invocation.method(#updatePost, [postId, post])),
            ),
          )
          as _i5.Future<_i2.Post>);

  @override
  _i5.Future<void> deletePost(int? postId) =>
      (super.noSuchMethod(
            Invocation.method(#deletePost, [postId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i3.Comment>> getComments(int? postId) =>
      (super.noSuchMethod(
            Invocation.method(#getComments, [postId]),
            returnValue: _i5.Future<List<_i3.Comment>>.value(<_i3.Comment>[]),
          )
          as _i5.Future<List<_i3.Comment>>);

  @override
  _i5.Future<_i3.Comment> createComment(int? postId, _i3.Comment? comment) =>
      (super.noSuchMethod(
            Invocation.method(#createComment, [postId, comment]),
            returnValue: _i5.Future<_i3.Comment>.value(
              _FakeComment_1(
                this,
                Invocation.method(#createComment, [postId, comment]),
              ),
            ),
          )
          as _i5.Future<_i3.Comment>);

  @override
  _i5.Future<_i3.Comment> updateComment(
    int? postId,
    int? commentId,
    String? commentData,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateComment, [postId, commentId, commentData]),
            returnValue: _i5.Future<_i3.Comment>.value(
              _FakeComment_1(
                this,
                Invocation.method(#updateComment, [
                  postId,
                  commentId,
                  commentData,
                ]),
              ),
            ),
          )
          as _i5.Future<_i3.Comment>);

  @override
  _i5.Future<void> deleteComment(int? postId, int? commentId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteComment, [postId, commentId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
